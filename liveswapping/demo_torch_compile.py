#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è torch.compile() —É—Å–∫–æ—Ä–µ–Ω–∏—è.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã torch.compile() –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç
–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è LiveSwapping –º–æ–¥–µ–ª–µ–π.
"""

import time
import torch
import numpy as np
from typing import Dict, List, Tuple

def check_torch_compile_support() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É torch.compile()."""
    try:
        if hasattr(torch, 'compile'):
            torch_version = torch.__version__
            major, minor = map(int, torch_version.split('.')[:2])
            return major >= 2
        return False
    except Exception:
        return False


def create_dummy_face_swap_model():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    class DummyFaceSwapModel(torch.nn.Module):
        def __init__(self):
            super().__init__()
            # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã face swap –º–æ–¥–µ–ª–∏
            self.encoder = torch.nn.Sequential(
                torch.nn.Conv2d(3, 64, 3, padding=1),
                torch.nn.ReLU(),
                torch.nn.Conv2d(64, 128, 3, padding=1),
                torch.nn.ReLU(),
                torch.nn.AdaptiveAvgPool2d(1),
                torch.nn.Flatten(),
                torch.nn.Linear(128, 512)
            )
            
            self.decoder = torch.nn.Sequential(
                torch.nn.Linear(512, 128 * 4 * 4),
                torch.nn.ReLU(),
                torch.nn.Unflatten(1, (128, 4, 4)),
                torch.nn.ConvTranspose2d(128, 64, 4, stride=2, padding=1),
                torch.nn.ReLU(),
                torch.nn.ConvTranspose2d(64, 32, 4, stride=2, padding=1), 
                torch.nn.ReLU(),
                torch.nn.ConvTranspose2d(32, 3, 4, stride=2, padding=1),
                torch.nn.Sigmoid()
            )
        
        def forward(self, face_img: torch.Tensor, source_latent: torch.Tensor) -> torch.Tensor:
            # Encode input face
            encoded = self.encoder(face_img)
            
            # Mix with source latent
            mixed = 0.7 * encoded + 0.3 * source_latent
            
            # Decode to swapped face
            swapped = self.decoder(mixed)
            
            return swapped
    
    return DummyFaceSwapModel()


def benchmark_model(model, test_data: List[Tuple[torch.Tensor, torch.Tensor]], 
                   name: str, warmup_runs: int = 10) -> Dict[str, float]:
    """–ë–µ–Ω—á–º–∞—Ä–∫ –º–æ–¥–µ–ª–∏."""
    print(f"üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name}...")
    
    # –ü—Ä–æ–≥—Ä–µ–≤
    for i in range(warmup_runs):
        face_img, source_latent = test_data[0]
        with torch.no_grad():
            _ = model(face_img, source_latent)
    
    torch.cuda.synchronize()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    start_time = time.time()
    
    for face_img, source_latent in test_data:
        with torch.no_grad():
            _ = model(face_img, source_latent)
    
    torch.cuda.synchronize()
    end_time = time.time()
    
    total_time = end_time - start_time
    avg_time = total_time / len(test_data) * 1000  # ms
    
    print(f"  ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}—Å")
    print(f"  üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–∞–¥—Ä: {avg_time:.2f}ms")
    print(f"  üöÄ FPS: {1000/avg_time:.1f}")
    
    return {
        "total_time": total_time,
        "avg_time_ms": avg_time,
        "fps": 1000/avg_time
    }


def test_torch_compile_modes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã torch.compile()."""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TORCH.COMPILE() –£–°–ö–û–†–ï–ù–ò–Ø")
    print("=" * 60)
    
    if not torch.cuda.is_available():
        print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º")
        return
    
    if not check_torch_compile_support():
        print("‚ùå torch.compile() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    batch_size = 4
    num_batches = 25
    test_data = []
    
    for _ in range(num_batches):
        face_img = torch.randn(batch_size, 3, 128, 128).cuda()
        source_latent = torch.randn(batch_size, 512).cuda()
        test_data.append((face_img, source_latent))
    
    print(f"  - –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π: {num_batches}")
    print(f"  - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤: {batch_size * num_batches}")
    
    # –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª–∏
    print("\nüèóÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π...")
    base_model = create_dummy_face_swap_model().cuda()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—É—é –º–æ–¥–µ–ª—å
    print(f"\n{'='*60}")
    base_results = benchmark_model(base_model, test_data, "–û–±—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    compile_modes = [
        ("default", {}),
        ("reduce-overhead", {"mode": "reduce-overhead"}),
        ("reduce-overhead-simple", {"mode": "reduce-overhead", "fullgraph": False}),
    ]
    
    compile_results = {}
    
    for mode_name, compile_kwargs in compile_modes:
        print(f"\n{'='*60}")
        try:
            print(f"üîß –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏ ({mode_name})...")
            compiled_model = torch.compile(base_model, **compile_kwargs)
            
            compile_results[mode_name] = benchmark_model(
                compiled_model, test_data, f"torch.compile({mode_name})")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ {mode_name}: {e}")
            continue
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n{'='*60}")
    print("üìà –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*60)
    
    print(f"{'–†–µ–∂–∏–º':<30} {'–í—Ä–µ–º—è (–º—Å)':<12} {'FPS':<8} {'–£—Å–∫–æ—Ä–µ–Ω–∏–µ':<10}")
    print("-" * 60)
    
    # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
    base_fps = base_results["fps"]
    print(f"{'–û–±—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å':<30} {base_results['avg_time_ms']:<12.2f} {base_fps:<8.1f} {'1.0x':<10}")
    
    # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    if compile_results:
        for mode_name, results in compile_results.items():
            speedup = results["fps"] / base_fps
            speedup_color = "üöÄ" if speedup > 1.5 else "üìà" if speedup > 1.1 else "üìä"
            print(f"{mode_name:<30} {results['avg_time_ms']:<12.2f} {results['fps']:<8.1f} {speedup_color}{speedup:<9.1f}x")
    else:
        print(f"{'–ö–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞':<30} {'N/A':<12} {'N/A':<8} {'N/A':<10}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if compile_results:
        best_mode = None
        best_speedup = 1.0
        
        for mode_name, results in compile_results.items():
            speedup = results["fps"] / base_fps
            if speedup > best_speedup:
                best_speedup = speedup
                best_mode = mode_name
        
        if best_mode:
            print(f"  ‚úÖ –õ—É—á—à–∏–π —Ä–µ–∂–∏–º: {best_mode} (—É—Å–∫–æ—Ä–µ–Ω–∏–µ {best_speedup:.1f}x)")
            
            if best_speedup > 2.0:
                print("  üéâ –û—Ç–ª–∏—á–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ! –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å torch.compile()")
            elif best_speedup > 1.5:
                print("  ‚úÖ –•–æ—Ä–æ—à–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
            elif best_speedup > 1.1:
                print("  üìà –£–º–µ—Ä–µ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ")
            else:
                print("  ‚ö†Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
        else:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å")
    else:
        print("  ‚ö†Ô∏è  torch.compile() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ")
        print("  üí° –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Triton: pip install triton")
        print("  üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –º–æ–¥–µ–ª—å - –æ–Ω–∞ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU
    if torch.cuda.is_available():
        props = torch.cuda.get_device_properties(0)
        print(f"\nüéÆ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU:")
        print(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ: {props.name}")
        print(f"  - –ü–∞–º—è—Ç—å: {props.total_memory / 1024**3:.1f} GB")
        print(f"  - –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {props.major}.{props.minor}")
        
        memory_used = torch.cuda.memory_allocated() / 1024**3
        memory_reserved = torch.cuda.memory_reserved() / 1024**3
        print(f"  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç–∏: {memory_used:.1f} GB")
        print(f"  - –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {memory_reserved:.1f} GB")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        test_torch_compile_modes()
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 