#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ LiveSwapping —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∏–∫—Å–∞–º–∏."""

import os
import sys
import argparse
from pathlib import Path

def check_and_fix_basicsr():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å basicsr."""
    try:
        from .utils.fix_basicsr import find_basicsr_degradations, check_degradations_file, fix_degradations_file
        
        # –ù–∞–π—Ç–∏ —Ñ–∞–π–ª—ã degradations.py
        degradations_files = find_basicsr_degradations()
        
        if not degradations_files:
            # basicsr –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            return True
        
        needs_fix = False
        for file_path in degradations_files:
            if check_degradations_file(file_path):
                needs_fix = True
                break
        
        if needs_fix:
            print("[FIX] basicsr issue detected - applying automatic fix...")
            fixed_count = 0
            for file_path in degradations_files:
                if check_degradations_file(file_path):
                    if fix_degradations_file(file_path):
                        fixed_count += 1
            
            if fixed_count > 0:
                print(f"[SUCCESS] Automatically fixed {fixed_count} basicsr file(s)")
                print("[INFO] Video processing should now work correctly")
            else:
                print("[WARNING] Failed to automatically fix basicsr")
                print("[TIP] Run: python liveswapping/fix_basicsr.py")
        
        return True
        
    except ImportError:
        # –ú–æ–¥—É–ª—å fix_basicsr –Ω–µ –Ω–∞–π–¥–µ–Ω
        return True
    except Exception as e:
        print(f"[WARNING] Error checking basicsr: {e}")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ - –∞–ª–∏–∞—Å –¥–ª—è run()."""
    return run()

def run():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è liveswapping.run module."""
    import sys
    from liveswapping.core.Image import cli as image_cli
    from liveswapping.core.video import cli as video_or_realtime_cli
    
    # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - —ç—Ç–æ —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if len(sys.argv) > 1 and sys.argv[1] in ["image", "video", "realtime", "optimized-video", "optimized-realtime"]:
        mode = sys.argv[1]
        remaining_args = sys.argv[2:]
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª --output –∏–ª–∏ -o, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª --output_path, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ --output –¥–ª—è image
        if mode == "image":
            if any(arg.startswith("--output") or arg == "-o" for arg in remaining_args):
                return image_cli(remaining_args)
            # –ï—Å–ª–∏ –µ—Å—Ç—å --output_path, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ --output
            new_args = []
            skip = False
            for i, arg in enumerate(remaining_args):
                if skip:
                    skip = False
                    continue
                if arg == "--output_path" and i+1 < len(remaining_args):
                    new_args.append("--output")
                    new_args.append(remaining_args[i+1])
                    skip = True
                else:
                    new_args.append(arg)
            return image_cli(new_args)
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã image
        if mode == "image":
            return image_cli(remaining_args)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã video  
        elif mode == "video":
            return video_or_realtime_cli(remaining_args)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã realtime
        elif mode == "realtime":
            from .core.realtime import cli as realtime_cli
            return realtime_cli(remaining_args)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
        elif mode == "optimized-video":
            print("üöÄ –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ...")
            try:
                from .core.video_batch import main_optimized as video_batch_main
                return video_batch_main(remaining_args)
            except ImportError:
                print("‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: python run.py video")
                return 1
        elif mode == "optimized-realtime":
            print("üöÄ –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô —Ä–µ–∞–ª-—Ç–∞–π–º –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            try:
                from .core.realtime_optimized import main_optimized as realtime_optimized_main
                return realtime_optimized_main(remaining_args)
            except ImportError:
                print("‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: python run.py realtime")
                return 1
    
    # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ GUI –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    parser = argparse.ArgumentParser(description="LiveSwapping - –†–µ–∞–ª—Ç–∞–π–º Face Swap")
    parser.add_argument("--mode", choices=["realtime", "video", "gui"], default="gui",
                       help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: realtime, video, –∏–ª–∏ gui")
    parser.add_argument("--skip-basicsr-fix", action="store_true",
                       help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ basicsr")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument("--source_image", help="–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
    parser.add_argument("--target_video", help="–ü—É—Ç—å –∫ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    parser.add_argument("--model_path", help="–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏")
    parser.add_argument("--output_path", help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    parser.add_argument("--camera_id", type=int, default=0, help="ID –≤–µ–±-–∫–∞–º–µ—Ä—ã")
    parser.add_argument("--use_tensorrt", action="store_true", default=True,
                       help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å torch-tensorrt –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
    
    args = parser.parse_args()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∏–∫—Å basicsr (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω)
    if not args.skip_basicsr_fix:
        check_and_fix_basicsr()
    
    # –ó–∞–ø—É—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
    if args.mode == "realtime":
        from .gui.realtime_gui import main as realtime_main
        return realtime_main()
    elif args.mode == "video":
        from .gui.video_gui import main as video_main
        return video_main()
    elif args.mode == "optimized-realtime":
        print("üöÄ –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô —Ä–µ–∞–ª-—Ç–∞–π–º –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        try:
            from .core.realtime_optimized import main_optimized as realtime_optimized_main
            return realtime_optimized_main([])
        except ImportError:
            print("‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: --mode realtime")
            return 1
    elif args.mode == "optimized-video":
        print("üöÄ –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ...")
        try:
            from .core.video_batch import main_optimized as video_batch_main
            return video_batch_main([])
        except ImportError:
            print("‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: --mode video")
            return 1
    else:  # gui
        print("[GUI] Starting LiveSwapping GUI...")
        print("Select mode:")
        print("1. Real-time processing (webcam)")
        print("2. Video processing")
        print("3. üöÄ OPTIMIZED Real-time processing")
        print("4. üöÄ OPTIMIZED Video processing")
        
        choice = input("Enter number (1-4): ").strip()
        
        if choice == "1":
            from .gui.realtime_gui import main as realtime_main
            return realtime_main()
        elif choice == "2":
            from .gui.video_gui import main as video_main
            return video_main()
        elif choice == "3":
            print("üöÄ –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô —Ä–µ–∞–ª-—Ç–∞–π–º –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            try:
                from .core.realtime_optimized import main_optimized as realtime_optimized_main
                return realtime_optimized_main([])
            except ImportError:
                print("‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (1)")
                return 1
        elif choice == "4":
            print("üöÄ –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ...")
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º GUI –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
                from .gui.video_gui import main_optimized as video_main_optimized
                return video_main_optimized()
            except ImportError as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å GUI: {e}")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º (2)")
                return 1
        else:
            print("[ERROR] Invalid choice")
            return 1

# GUI entry point
def start_gui():
    """Entry point for GUI mode"""
    print("[GUI] Starting LiveSwapping GUI...")
    
    import sys
    from liveswapping.core.Image import cli as image_cli
    from liveswapping.core.video import cli as video_or_realtime_cli
    
    if len(sys.argv) > 1 and sys.argv[1] == "image":
        return image_cli(sys.argv[2:])
    else:
        return video_or_realtime_cli(sys.argv[1:])

if __name__ == "__main__":
    main() 